@using ContactFrontend.Service
@using SharedModels.Models
@using System.ComponentModel.DataAnnotations
@inject ContactService ContactService
<div class="modal fade show" style="display:block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Contact</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="() => OnClose.InvokeAsync()" aria-label="Close" ></button>
            </div>
            <div class="modal-body">
                <EditForm id="formtest" Model="@contact" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="firstName">First Name:</label>
                        <InputText id="firstName" class="form-control" @bind-Value="contact.FirstName" />
                        <ValidationMessage For="@(() => contact.FirstName)" />
                    </div>
                    <div class="form-group">
                        <label for="lastName">Last Name:</label>
                        <InputText id="lastName" class="form-control" @bind-Value="contact.LastName" />
                        <ValidationMessage For="@(() => contact.LastName)" />
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <InputText id="email" class="form-control" type="email" @bind-Value="contact.Email" />
                        <ValidationMessage For="@(() => contact.Email)" />
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber">Phone Number:</label>
                        <InputText id="phoneNumber" class="form-control" @bind-Value="contact.PhoneNumber" />
                        <ValidationMessage For="@(() => contact.PhoneNumber)" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => OnClose.InvokeAsync()">Close</button>
                        <button type="submit" class="btn btn-primary">Add Contact</button>
                    </div>
                </EditForm>
            </div>
            
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback<ToastMessage> ShowToast { get; set; }
    [Parameter]
    public EventCallback ReLoadContacts { get; set; }
    private Contact contact = new Contact();
    




    private async Task HandleValidSubmit()
    {


        try {
            var result = await ContactService.CreateContactAsync(contact);

            if (result != null)
            {
                await ShowToast.InvokeAsync(new ToastMessage
                    {
                        Type = ToastType.Success,
                        Title = "Note",
                        HelpText = $"{DateTime.Now}",
                        Message = "Contact added successfully.",
                    });

                await OnClose.InvokeAsync();
                await ReLoadContacts.InvokeAsync();
                contact = new Contact(); 
            }
        }
        catch (ValidationException ve) {

            await ShowToast.InvokeAsync(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Title = "Note",
                    HelpText = $"{DateTime.Now}",
                    Message = ve.Message,
                });
        }

        

  

    }

}
